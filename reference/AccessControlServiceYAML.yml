openapi: 3.0.1
info:
  title: Access Control Service
  description: Access Control Service APIs govern the creation of permissions for a microservice. These permissions are mapped to pre-defined user roles that are global to all applications. Additionally, the service governs consent management, which sets ownership and controls who can access what data and tracks official patient consent to share that data with other users. Application developers use these APIs to control the type of access granted for each user role. By default, the IT Administrator is given ownership of all permissions in the service.  Application developers can configure consent management to provide more granular control over data. For example, within an organization, a physician may be given access to all his or her patients' data or only some fields of patient data, indefinitely or for a set period of time, and may be able to grant access to other physicians or other roles in the organization. This allows application developers to easily set permissions and user access independently of other BrightInsight APIs, ensuring good and consistent end-user experiences. BrightInsight developers typically provide the initial configuration and these remain in place once they have been tested and put into production.
  version: 1.0.0
  x-safety-class: C
  x-safety-class-description: This is a Permission API used create one or more permissions.
  x-external-services:
  - name: User Non-PII Service
    use: Used to govern the creation of user role permissions and configure consent management for a microservice.
    errorHandling: https://flexdigitalhealth.jamacloud.com/perspective.req#/items/2767849?projectId=103
  - name: Organization Service
    use: Used to get organization information and status
    errorHandling: https://flexdigitalhealth.jamacloud.com/perspective.req#/items/3939886?projectId=136
servers:
- url: http://localhost
  description: Generated server url
paths:
  /consent-templates:
    post:
      tags:
      - ConsentTemplate
      summary: Create Consent Template
      description: Creates a new Consent Template.
      operationId: API-ACS08
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentTemplateDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ConsentTemplateDTO'
        "401":
          description: The request has not been applied because it lacks valid authentication
            credentials for the target resource.
          content:
            application/json:
              schema:
                example:
                  errors:
                  - code: "401"
                    message: The request has not been applied because it lacks valid
                      authentication credentials for the target resource.
        "403":
          description: The server understood the request but refuses to authorize
            it.
          content:
            application/json:
              schema:
                example:
                  errors:
                  - code: "403"
                    message: The server understood the request but refuses to authorize
                      it.
        "500":
          description: The server encountered an unexpected condition that prevented
            it from fulfilling the request.
          content:
            application/json:
              schema:
                example:
                  errors:
                  - code: "500"
                    message: "Oops, something went wrong! Please contact the server\
                      \ administrator."
      x-validation-rules:
      - name: VR_BT01_001
        description: "The request lacks valid authentication credentials: blank authorization,\
          \ missing authorization, expired user's tokenId. Refer to ERR_401."
      - name: VR_BT01_002
        description: Login user has no permission. Refer to ERR_403.
      - name: VR_BT01_003
        description: Invalid Content-Type value. Refer to ERR_415.
      - name: VR_BT01_004
        description: The server encountered an unexpected condition. Refer to ERR_500.
      - name: VR_BT01_005
        description: A mandatory field is null. Refer to ERR_0801
      - name: VR_BT01_006
        description: Field doesn't have the required length. Refer to ERR_0803.
      - name: VR_BT01_007
        description: Field doesn't have a valid range value. Refer to ERR_34802.
      x-permissions:
      - product.plt.access.control.service.consent.consent.template.create
      x-is-external: "true"
      x-roles:
      - IT_ADMIN
      x-requirements:
      - ACS-SRS-34
  /field-group:
    post:
      tags:
      - FieldGroup
      summary: Create Consent Field Group
      description: Create Consent Field Group API allows creating a new Consent Field
        Group.
      operationId: API-ACS04
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FieldGroupDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FieldGroupDTO'
        "401":
          description: The request has not been applied because it lacks valid authentication
            credentials for the target resource.
          content:
            application/json:
              schema:
                example:
                  errors:
                  - code: "401"
                    message: The request has not been applied because it lacks valid
                      authentication credentials for the target resource.
        "403":
          description: The server understood the request but refuses to authorize
            it.
          content:
            application/json:
              schema:
                example:
                  errors:
                  - code: "403"
                    message: The server understood the request but refuses to authorize
                      it.
        "500":
          description: The server encountered an unexpected condition that prevented
            it from fulfilling the request.
          content:
            application/json:
              schema:
                example:
                  errors:
                  - code: "500"
                    message: "Oops, something went wrong! Please contact the server\
                      \ administrator."
      x-validation-rules:
      - name: VR_BT01_001
        description: "The request lacks valid authentication credentials: blank authorization,\
          \ missing authorization, expired user's tokenId. Refer to ERR_401."
      - name: VR_BT01_002
        description: Login user has no permission. Refer to ERR_403.
      - name: VR_BT01_003
        description: Invalid Content-Type value. Refer to ERR_415.
      - name: VR_BT01_004
        description: The server encountered an unexpected condition. Refer to ERR_500.
      - name: VR_BT01_005
        description: A mandatory field is null. Refer to ERR_0801
      - name: VR_BT01_006
        description: Field doesn't have the required length. Refer to ERR_0803.
      - name: VR_BT01_007
        description: Field doesn't have a valid range value. Refer to ERR_34802.
      x-permissions:
      - product.plt.access.control.service.consent.fieldgroup.create
      x-is-external: "true"
      x-roles:
      - IT_ADMIN
      x-requirements:
      - ACS-SRS-35
  /permissions:
    post:
      tags:
      - Permission
      summary: Create Permissions
      description: Create Permissions API allows creating a new permissions.
      operationId: API-ACS01
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionWrapperDTO'
        required: true
      responses:
        "415":
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                ERR_415:
                  $ref: '#/components/examples/ERR_415'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                ERR_0801:
                  $ref: '#/components/examples/ERR_0801'
                ERR_0815:
                  $ref: '#/components/examples/ERR_0815'
                ERR_0820:
                  $ref: '#/components/examples/ERR_0820'
                ERR_0845:
                  $ref: '#/components/examples/ERR_0845'
        "201":
          description: Success response message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionDTO'
        "401":
          description: The request has not been applied because it lacks valid authentication
            credentials for the target resource.
          content:
            application/json:
              schema:
                example:
                  errors:
                  - code: "401"
                    message: The request has not been applied because it lacks valid
                      authentication credentials for the target resource.
        "403":
          description: The server understood the request but refuses to authorize
            it.
          content:
            application/json:
              schema:
                example:
                  errors:
                  - code: "403"
                    message: The server understood the request but refuses to authorize
                      it.
        "500":
          description: The server encountered an unexpected condition that prevented
            it from fulfilling the request.
          content:
            application/json:
              schema:
                example:
                  errors:
                  - code: "500"
                    message: "Oops, something went wrong! Please contact the server\
                      \ administrator."
      x-validation-rules:
      - name: VR_BT01_001
        description: "The request lacks valid authentication credentials: blank authorization,\
          \ missing authorization, expired user's tokenId. Refer to ERR_401."
      - name: VR_BT01_002
        description: Login user has no permission. Refer to ERR_403.
      - name: VR_BT01_003
        description: Invalid Content-Type value. Refer to ERR_415.
      - name: VR_BT01_004
        description: The server encountered an unexpected condition. Refer to ERR_500.
      - name: VR_BT01_005
        description: A mandatory field is null. Refer to ERR_0801
      - name: VR_BT01_006
        description: Field doesn't have the required length. Refer to ERR_0803.
      - name: VR_BT01_007
        description: Field doesn't have a valid range value. Refer to ERR_34802.
      x-permissions:
      - product.plt.access.control.service.permission.create
      x-is-external: "true"
      x-roles:
      - IT_ADMIN
      - PATIENT
      x-requirements:
      - ACS-SRS-26
      - ACS-SRS-27
      - ACS-SRS-28
  /roles/{id}:
    put:
      tags:
      - Role
      summary: Update Role
      description: Allows the user to update any Role
      operationId: API-ACS03
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: 05e78fe8-0742-11eb-adc1-0242ac120002
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RoleDTO'
        "401":
          description: The request has not been applied because it lacks valid authentication
            credentials for the target resource.
          content:
            application/json:
              schema:
                example:
                  errors:
                  - code: "401"
                    message: The request has not been applied because it lacks valid
                      authentication credentials for the target resource.
        "403":
          description: The server understood the request but refuses to authorize
            it.
          content:
            application/json:
              schema:
                example:
                  errors:
                  - code: "403"
                    message: The server understood the request but refuses to authorize
                      it.
        "500":
          description: The server encountered an unexpected condition that prevented
            it from fulfilling the request.
          content:
            application/json:
              schema:
                example:
                  errors:
                  - code: "500"
                    message: "Oops, something went wrong! Please contact the server\
                      \ administrator."
      x-validation-rules:
      - name: VR_BT01_001
        description: "The request lacks valid authentication credentials: blank authorization,\
          \ missing authorization, expired user's tokenId. Refer to ERR_401."
      - name: VR_BT01_002
        description: Login user has no permission. Refer to ERR_403.
      - name: VR_BT01_003
        description: Invalid Content-Type value. Refer to ERR_415.
      - name: VR_BT01_004
        description: The server encountered an unexpected condition. Refer to ERR_500.
      - name: VR_BT01_005
        description: A mandatory field is null. Refer to ERR_0801
      - name: VR_BT01_006
        description: Field doesn't have the required length. Refer to ERR_0803.
      - name: VR_BT01_007
        description: Field doesn't have a valid range value. Refer to ERR_34802.
      x-permissions:
      - product.plt.access.control.service.permission.update
      x-is-external: "true"
      x-roles:
      - IT_ADMIN
      - PATIENT
    post:
      tags:
      - Role
      summary: Add permissions to role
      description: Allows adding permissions to an existing role.
      operationId: API-ACS09
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: 05e78fe8-0742-11eb-adc1-0242ac120002
      requestBody:
        content:
          application/json:
            schema:
              uniqueItems: true
              type: array
              items:
                type: string
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                ERR_0801:
                  $ref: '#/components/examples/ERR_0801'
                ERR_0819:
                  $ref: '#/components/examples/ERR_0819'
                ERR_0820:
                  $ref: '#/components/examples/ERR_0820'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                ERR_404:
                  $ref: '#/components/examples/ERR_404'
        "415":
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                ERR_415:
                  $ref: '#/components/examples/ERR_415'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDTO'
        "401":
          description: The request has not been applied because it lacks valid authentication
            credentials for the target resource.
          content:
            application/json:
              schema:
                example:
                  errors:
                  - code: "401"
                    message: The request has not been applied because it lacks valid
                      authentication credentials for the target resource.
        "403":
          description: The server understood the request but refuses to authorize
            it.
          content:
            application/json:
              schema:
                example:
                  errors:
                  - code: "403"
                    message: The server understood the request but refuses to authorize
                      it.
        "500":
          description: The server encountered an unexpected condition that prevented
            it from fulfilling the request.
          content:
            application/json:
              schema:
                example:
                  errors:
                  - code: "500"
                    message: "Oops, something went wrong! Please contact the server\
                      \ administrator."
      x-validation-rules:
      - name: VR_BT01_001
        description: "The request lacks valid authentication credentials: blank authorization,\
          \ missing authorization, expired user's tokenId. Refer to ERR_401."
      - name: VR_BT01_002
        description: Login user has no permission. Refer to ERR_403.
      - name: VR_BT01_003
        description: Invalid Content-Type value. Refer to ERR_415.
      - name: VR_BT01_004
        description: The server encountered an unexpected condition. Refer to ERR_500.
      - name: VR_BT01_005
        description: A mandatory field is null. Refer to ERR_0801
      - name: VR_BT01_006
        description: Field doesn't have the required length. Refer to ERR_0803.
      - name: VR_BT01_007
        description: Field doesn't have a valid range value. Refer to ERR_34802.
      x-permissions:
      - product.plt.access.control.service.role.add.permissions
      x-is-external: "true"
      x-roles:
      - IT_ADMIN
      x-requirements:
      - ACS-SRS-26
  /roles:
    post:
      tags:
      - Role
      summary: Create Role
      description: Create Role API allows creating a new Role.
      operationId: API-ACS02
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleDTO'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                ERR_0801:
                  $ref: '#/components/examples/ERR_0801'
                ERR_0819:
                  $ref: '#/components/examples/ERR_0819'
                ERR_0820:
                  $ref: '#/components/examples/ERR_0820'
        "415":
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                ERR_415:
                  $ref: '#/components/examples/ERR_415'
        "201":
          description: Success response message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDTO'
        "401":
          description: The request has not been applied because it lacks valid authentication
            credentials for the target resource.
          content:
            application/json:
              schema:
                example:
                  errors:
                  - code: "401"
                    message: The request has not been applied because it lacks valid
                      authentication credentials for the target resource.
        "403":
          description: The server understood the request but refuses to authorize
            it.
          content:
            application/json:
              schema:
                example:
                  errors:
                  - code: "403"
                    message: The server understood the request but refuses to authorize
                      it.
        "500":
          description: The server encountered an unexpected condition that prevented
            it from fulfilling the request.
          content:
            application/json:
              schema:
                example:
                  errors:
                  - code: "500"
                    message: "Oops, something went wrong! Please contact the server\
                      \ administrator."
      x-validation-rules:
      - name: VR_BT01_001
        description: "The request lacks valid authentication credentials: blank authorization,\
          \ missing authorization, expired user's tokenId. Refer to ERR_401."
      - name: VR_BT01_002
        description: Login user has no permission. Refer to ERR_403.
      - name: VR_BT01_003
        description: Invalid Content-Type value. Refer to ERR_415.
      - name: VR_BT01_004
        description: The server encountered an unexpected condition. Refer to ERR_500.
      - name: VR_BT01_005
        description: A mandatory field is null. Refer to ERR_0801
      - name: VR_BT01_006
        description: Field doesn't have the required length. Refer to ERR_0803.
      - name: VR_BT01_007
        description: Field doesn't have a valid range value. Refer to ERR_34802.
      x-permissions:
      - product.plt.access.control.service.role.create
      x-is-external: "true"
      x-roles:
      - IT_ADMIN
      - PATIENT
      x-requirements:
      - ACS-SRS-29
      - ACS-SRS-30
      - ACS-SRS-31
components:
  schemas:
    AttachmentDTO:
      required:
      - content_type
      type: object
      properties:
        content_type:
          type: string
          description: "Mime type of the content, with charset etc."
          example: MIME
        language:
          type: string
        data:
          type: string
        url:
          type: string
        size:
          type: integer
          format: int32
        title:
          type: string
    CodeableConceptDTO:
      type: object
      properties:
        coding:
          type: array
          description: Code defined by a terminology system.
          items:
            $ref: '#/components/schemas/CodingDTO'
        text:
          type: string
          description: Plain text representation of the concept.
          example: Code from external system
    CodingDTO:
      type: object
      properties:
        system:
          type: string
          description: Identity of the terminology system.
          example: https://acme.lab/resultcodes
        version:
          type: string
          description: Version of the system - if relevant.
          example: 0.1.0
        code:
          type: string
          description: Symbol in syntax defined by the system.
          example: COD1
        display:
          type: string
          description: Representation defined by the system.
          example: Code1
        userSelected:
          type: boolean
          description: If this coding was chosen directly by the user.
          example: true
      description: Code defined by a terminology system.
    ConsentTemplateDTO:
      required:
      - action
      - field_groups
      - version
      type: object
      properties:
        id:
          type: string
          readOnly: true
        version:
          type: string
          description: Version of the Consent
          example: V1
        action:
          type: array
          items:
            $ref: '#/components/schemas/CodeableConceptDTO'
        identifier:
          $ref: '#/components/schemas/IdentifierDTO'
        scope:
          $ref: '#/components/schemas/CodeableConceptDTO'
        attachment:
          $ref: '#/components/schemas/AttachmentDTO'
        field_groups:
          uniqueItems: true
          type: array
          items:
            type: string
    IdentifierDTO:
      type: object
      properties:
        use:
          type: string
          description: "Identifies the purpose for this identifier, if known."
          example: official
        type:
          $ref: '#/components/schemas/CodeableConceptDTO'
        system:
          type: string
          description: The namespace for the identifier value.
          example: urn:ietf:rfc:3986
        value:
          type: string
          description: The value that is unique.
          example: urn:uuid:a76d9bbf-f293-4fb7-ad4c-2851cac77162
        assigner:
          type: string
          description: ID of the organization that issued the ID.
          example: 05e78fe8-0742-11eb-adc1-0242ac120002
        period:
          $ref: '#/components/schemas/PeriodDTO'
    PeriodDTO:
      type: object
      properties:
        start:
          type: string
          description: Starting time with inclusive boundary.
          format: date-time
          example: 2020-02-07T18:28:17Z
        end:
          type: string
          description: "End time with inclusive boundary, if not ongoing."
          format: date-time
          example: 2020-02-07T18:28:17Z
      description: Time period when id is/was valid for use.
    FieldDTO:
      required:
      - display
      - name
      type: object
      properties:
        name:
          type: string
          description: name of the field on the service domain
          example: name
        display:
          type: string
          description: display value of the field on UI
          example: name
      description: allowed fields on the consent
    FieldGroupDTO:
      required:
      - name
      - resourceType
      type: object
      properties:
        id:
          type: string
          description: field group ID
          example: 05e78fe8-0742-11eb-adc1-0242ac120002
        name:
          type: string
          description: name of the field group
          example: careplan field group
        resourceType:
          type: string
          description: type of the elements on the field group
          example: careplan
        fields:
          type: array
          description: allowed fields on the consent
          items:
            $ref: '#/components/schemas/FieldDTO'
    PermissionDTO:
      required:
      - apiPermission
      - apiUrl
      type: object
      properties:
        apiPermission:
          type: string
          description: Api permissions
          example: product.roles.get
        apiUrl:
          type: string
          description: Api URL
          example: /roles
        apiMethod:
          type: string
          description: Api method
          example: /GET
          enum:
          - POST
          - GET
          - PUT
          - PATCH
          - DELETE
        description:
          type: string
          description: Permission description
          example: Permission to get roles
    PermissionWrapperDTO:
      type: object
      properties:
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PermissionDTO'
    ErrorDetail:
      type: object
      properties:
        code:
          type: string
        field:
          type: string
        message:
          type: string
    ErrorMessage:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorDetail'
    RoleDTO:
      required:
      - locationHeuristics
      - mfa
      - name
      - permissions
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
          description: Role name
          example: PHYSICIAN
        description:
          type: string
          description: Role description
          example: Physician role
        mfa:
          type: boolean
          description: Multi-Factor authentication
          example: false
        locationHeuristics:
          type: boolean
          description: Location Heuristics
          example: false
        permissions:
          uniqueItems: true
          type: array
          description: Api permissions
          example: "[product.roles.get, product.roles.post]"
          items:
            type: string
            description: Api permissions
            example: "[product.roles.get, product.roles.post]"
  examples:
    ERR_415:
      summary: ERR_415
      description: Content-type header is missing or is different to application/json
      value: "{\n  \"errors\": [\n    {\n      \"code\": \"ERR_415\",\n      \"message\"\
        : \"Unsupported media type.\"\n    }\n  ]\n}"
    ERR_400:
      summary: ERR_400
      description: The server cannot or will not process the request due to something
        that is perceived to be a client error
      value: "{\n  \"errors\": [\n    {\n      \"code\": \"ERR_400\",\n      \"message\"\
        : \"Could not resolve property: page.\"\n    }\n  ]\n}"
    ERR_404:
      summary: ERR_404
      description: The server cannot find any result
      value: "{\n  \"errors\": [\n    {\n      \"code\": \"ERR_404\",\n      \"message\"\
        : \"{0} is not found!\"\n    }\n  ]\n}"
    ERR_0801:
      summary: ERR_0801
      description: Field is required
      value: "{\n  \"errors\": [\n    {\n      \"code\": \"ERR_0801\",\n      \"field\"\
        : \"{0}\",\n      \"message\": \"{0} is required.\"\n    }\n  ]\n}"
    ERR_0803:
      summary: ERR_0803
      description: The server will not process the request due to a invalid zip file format
      value: "{\n  \"errors\": [\n    {\n      \"code\": \"ERR_0803\",\n      \"field\"\
        : \"{0}\",\n      \"message\": \"{0} cannot be longer than 255 characters.\"\
        \n    }\n  ]\n}"
    ERR_0844:
      summary: ERR_0844
      description: The server will not process the request due to a field restriction
      value: "{\n  \"errors\": [\n    {\n      \"code\": \"ERR_0844\",\n      \"message\"\
        : \"Field {0} or {1} is required, please provide one of them; they are mutually\
        \ exclusive\"\n    }\n  ]\n}"
    ERR_0845:
      summary: ERR_0845
      description: "Duplicate {0} values."
      value: "{\n  \"errors\": [\n    {\n      \"code\": \"ERR_0845\",\n      \"field\"\
        : \"{0}\",\n      \"message\": \"Duplicate {0} values.\"\n    }\n  ]\n}"
