openapi: 3.0.1
info:
  title: Organization Service
  description: '<p>Organization Service APIs are a mesh of policies governing <i>organizations</i> in a customer solution. BrightInsight developers use them to define and work with organizations and how they are assigned to functions and microservices in the customer application. This allows them to easily map permissions and data policies for each organization. BrightInsight developers typically provide the initial configuration and these remain in place once they have been tested and put into production. Organization settings control the functionality available to end-users in each organization defined for the customer solution.</p> <p>End-users are assigned to each organization and thereby affected by the controls of the Organization microservice. This architecture enables the BrightInsight developer to configure organizations independently of other BrightInsight microservices, and then assign them as needed, making it easy to administer access and functionality from other microservices by organization.</p>'
  version: 1.0.0
  x-safety-class: C
  x-safety-class-description: 'the loss of the primary function of the User Schedule Service may potentially, worse-case, cause serious injury to the patient.'
servers:
  - url: 'http://localhost'
    description: Generated server url
paths:
  '/organizations/{id}':
    get:
      tags:
        - Organization
      summary: Get Organization
      description: Fetches an organization. Use for looking up settings for a single organization.
      operationId: API-OS03
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: 05e78fe8-0742-11eb-adc1-0242ac120002
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OrganizationDTO'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/json:
              schema:
                example:
                  errors:
                    - code: '401'
                      message: The request has not been applied because it lacks valid authentication credentials for the target resource.
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/json:
              schema:
                example:
                  errors:
                    - code: '403'
                      message: The server understood the request but refuses to authorize it.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                ERR_404:
                  $ref: '#/components/examples/ERR_404'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                example:
                  errors:
                    - code: '500'
                      message: 'Oops, something went wrong! Please contact the server administrator.'
      x-validation-rules:
        - name: VR_OS03_001
          description: 'The request lacks valid authentication credentials: blank authorization, missing authorization, expired user''s tokenId. Refer to ERR_401.'
        - name: VR_OS03_002
          description: Login user has no permission. Refer to ERR_403.
        - name: VR_OS03_003
          description: The server encountered an unexpected condition. Refer to ERR_500.
        - name: VR_OS03_004
          description: The server can't find the requested resource. Refer to ERR_404
      x-permissions:
        - product.base-templace.organization.get
      x-is-external: 'true'
      x-roles:
        - IT_ADMIN
        - PATIENT
      x-grpc:
        serviceName: OrganizationService
        methodName: get
    put:
      tags:
        - Organization
      summary: Update Organization
      description: 'Changes settings for an organization. Use for modifying settings for an organization, such as active/inactive status.'
      operationId: API-OS04
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: 05e78fe8-0742-11eb-adc1-0242ac120002
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                ERR_0801:
                  $ref: '#/components/examples/ERR_0801'
                ERR_0803:
                  $ref: '#/components/examples/ERR_0803'
                ERR_0845:
                  $ref: '#/components/examples/ERR_0845'
                ERR_28802:
                  $ref: '#/components/examples/ERR_28802'
                ERR_28809:
                  $ref: '#/components/examples/ERR_28809'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/json:
              schema:
                example:
                  errors:
                    - code: '401'
                      message: The request has not been applied because it lacks valid authentication credentials for the target resource.
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/json:
              schema:
                example:
                  errors:
                    - code: '403'
                      message: The server understood the request but refuses to authorize it.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                ERR_404:
                  $ref: '#/components/examples/ERR_404'
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                ERR_415:
                  $ref: '#/components/examples/ERR_415'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                example:
                  errors:
                    - code: '500'
                      message: 'Oops, something went wrong! Please contact the server administrator.'
      x-validation-rules:
        - name: VR_OS04_001
          description: 'The request lacks valid authentication credentials: blank authorization, missing authorization, expired user''s tokenId. Refer to ERR_401.'
        - name: VR_OS04_002
          description: Login user has no permission. Refer to ERR_403.
        - name: VR_OS04_003
          description: Invalid Content-Type value. Refer to ERR_415.
        - name: VR_OS04_004
          description: The server encountered an unexpected condition. Refer to ERR_500.
        - name: VR_OS04_005
          description: A mandatory field is null. Refer to ERR_0801.
        - name: VR_OS04_006
          description: Field doesn't have the required length. Refer to ERR_0803.
        - name: VR_OS04_007
          description: Invalid date period values. Refer to ERR_0845.
        - name: VR_OS04_008
          description: The server can't find the requested resource. Refer to ERR_404.
        - name: VR_OS04_009
          description: Organization with same name already exists. Refer to ERR_28802.
        - name: VR_OS04_010
          description: Parent Organization does not exist. Refer to ERR_28809.
      x-permissions:
        - product.base-templace.organization.update
      x-is-external: 'true'
      x-roles:
        - IT_ADMIN
        - PATIENT
      x-grpc:
        serviceName: OrganizationService
        methodName: update
    delete:
      tags:
        - Organization
      summary: Delete Organization
      description: Removes an organization from the system. Use for deleting an organization (without removing end-users assigned to that organization).
      operationId: API-OS06
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: 05e78fe8-0742-11eb-adc1-0242ac120002
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/json:
              schema:
                example:
                  errors:
                    - code: '401'
                      message: The request has not been applied because it lacks valid authentication credentials for the target resource.
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/json:
              schema:
                example:
                  errors:
                    - code: '403'
                      message: The server understood the request but refuses to authorize it.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                ERR_404:
                  $ref: '#/components/examples/ERR_404'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                example:
                  errors:
                    - code: '500'
                      message: 'Oops, something went wrong! Please contact the server administrator.'
      x-validation-rules:
        - name: VR_OS06_001
          description: 'The request lacks valid authentication credentials: blank authorization, missing authorization, expired user''s tokenId. Refer to ERR_401.'
        - name: VR_OS06_002
          description: Login user has no permission. Refer to ERR_403.
        - name: VR_OS06_003
          description: The server encountered an unexpected condition. Refer to ERR_500.
        - name: VR_OS06_004
          description: The server can't find the requested resource. Refer to ERR_404
        - name: VR_OS06_005
          description: Invalid field to sort results by. Refer to ERR_0841
      x-permissions:
        - product.base-templace.organization.delete
      x-is-external: 'true'
      x-roles:
        - IT_ADMIN
        - PATIENT
      x-grpc:
        serviceName: OrganizationService
        methodName: delete
    patch:
      tags:
        - Organization
      summary: Patch Organization
      description: Change specific settings for an organization. Use for modifying particular settings for an organization.
      operationId: API-OS05
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationPartialDTO'
        required: true
      responses:
        '200':
          description: Success response message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                ERR_0803:
                  $ref: '#/components/examples/ERR_0803'
                ERR_0845:
                  $ref: '#/components/examples/ERR_0845'
                ERR_28802:
                  $ref: '#/components/examples/ERR_28802'
                ERR_28809:
                  $ref: '#/components/examples/ERR_28809'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/json:
              schema:
                example:
                  errors:
                    - code: '401'
                      message: The request has not been applied because it lacks valid authentication credentials for the target resource.
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/json:
              schema:
                example:
                  errors:
                    - code: '403'
                      message: The server understood the request but refuses to authorize it.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                ERR_404:
                  $ref: '#/components/examples/ERR_404'
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                ERR_415:
                  $ref: '#/components/examples/ERR_415'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                example:
                  errors:
                    - code: '500'
                      message: 'Oops, something went wrong! Please contact the server administrator.'
      x-validation-rules:
        - name: VR_OS05_001
          description: 'The request lacks valid authentication credentials: blank authorization, missing authorization, expired user''s tokenId. Refer to ERR_401.'
        - name: VR_OS05_002
          description: Login user has no permission. Refer to ERR_403.
        - name: VR_OS05003
          description: Invalid Content-Type value. Refer to ERR_415.
        - name: VR_OS05_004
          description: The server encountered an unexpected condition. Refer to ERR_500.
        - name: VR_OS05_005
          description: Field doesn't have the required length. Refer to ERR_0803.
        - name: VR_OS05_006
          description: Invalid date period values. Refer to ERR_0845.
        - name: VR_OS05_007
          description: The server can't find the requested resource. Refer to ERR_404
        - name: VR_OS04_008
          description: Organization with same name already exists. Refer to ERR_28802.
        - name: VR_OS04_009
          description: Parent Organization does not exist. Refer to ERR_28809.
      x-permissions:
        - product.base-templace.organization.patch
      x-is-external: 'true'
      x-roles:
        - IT_ADMIN
        - PATIENT
  '/organizations/{id}/children':
    get:
      tags:
        - Organization
      summary: List Child Organizations
      description: Fetches a list of child organizations under an organization. Use for looking up the organizations that are descendants of an organization.
      operationId: API-OS07
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: 05e78fe8-0742-11eb-adc1-0242ac120002
        - name: level
          in: query
          required: false
          schema:
            type: string
            default: DESCENDANTS
            enum:
              - DIRECT
              - DESCENDANTS
        - name: page
          in: query
          description: One-based page index (1..N)
          schema:
            type: integer
            default: '1'
        - name: size
          in: query
          description: The size of the page to be returned
          schema:
            type: integer
            default: '20'
        - name: sort
          in: query
          description: 'Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.'
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagingInfoOrganizationDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                ERR_400:
                  $ref: '#/components/examples/ERR_400'
                ERR_0841:
                  $ref: '#/components/examples/ERR_0841'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/json:
              schema:
                example:
                  errors:
                    - code: '401'
                      message: The request has not been applied because it lacks valid authentication credentials for the target resource.
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/json:
              schema:
                example:
                  errors:
                    - code: '403'
                      message: The server understood the request but refuses to authorize it.
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                example:
                  errors:
                    - code: '500'
                      message: 'Oops, something went wrong! Please contact the server administrator.'
      x-validation-rules:
        - name: VR_OS07_001
          description: 'The request lacks valid authentication credentials: blank authorization, missing authorization, expired user''s tokenId. Refer to ERR_401.'
        - name: VR_OS07_002
          description: Login user has no permission. Refer to ERR_403.
        - name: VR_OS07_003
          description: The server encountered an unexpected condition. Refer to ERR_500.
        - name: VR_OS07_004
          description: A field or parameters contains the wrong data type. Refer to ERR_400
      x-permissions:
        - product.base-templace.organization.list
      x-is-external: 'true'
      x-roles:
        - IT_ADMIN
        - PATIENT
      x-grpc:
        serviceName: OrganizationService
        methodName: listChildren
  /organizations:
    get:
      tags:
        - Organization
      summary: List Organizations
      description: Fetches a paged list of organizations defined for the system. Use for looking up all organizations.
      operationId: API-OS02
      parameters:
        - name: page
          in: query
          description: One-based page index (1..N)
          schema:
            type: integer
            default: '1'
        - name: size
          in: query
          description: The size of the page to be returned
          schema:
            type: integer
            default: '20'
        - name: sort
          in: query
          description: 'Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.'
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagingInfoOrganizationDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                ERR_400:
                  $ref: '#/components/examples/ERR_400'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/json:
              schema:
                example:
                  errors:
                    - code: '401'
                      message: The request has not been applied because it lacks valid authentication credentials for the target resource.
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/json:
              schema:
                example:
                  errors:
                    - code: '403'
                      message: The server understood the request but refuses to authorize it.
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                example:
                  errors:
                    - code: '500'
                      message: 'Oops, something went wrong! Please contact the server administrator.'
      x-validation-rules:
        - name: VR_OS02_001
          description: 'The request lacks valid authentication credentials: blank authorization, missing authorization, expired user''s tokenId. Refer to ERR_401.'
        - name: VR_OS02_002
          description: Login user has no permission. Refer to ERR_403.
        - name: VR_OS02_003
          description: The server encountered an unexpected condition. Refer to ERR_500.
        - name: VR_OS02_004
          description: A field or parameters contains the wrong data type. Refer to ERR_400
      x-permissions:
        - product.base-templace.organization.list
      x-is-external: 'true'
      x-roles:
        - IT_ADMIN
        - PATIENT
      x-grpc:
        serviceName: OrganizationService
        methodName: list
    post:
      tags:
        - Organization
      summary: Create Organization
      description: 'Establishes a new organization as a parent or as a child to another organization. Use for creating a new organization, setting it as active or inactive, and describing it.'
      operationId: API-OS01
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationDTO'
        required: true
      responses:
        '201':
          description: Success response message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                ERR_0801:
                  $ref: '#/components/examples/ERR_0801'
                ERR_0803:
                  $ref: '#/components/examples/ERR_0803'
                ERR_0845:
                  $ref: '#/components/examples/ERR_0845'
                ERR_28802:
                  $ref: '#/components/examples/ERR_28802'
                ERR_28809:
                  $ref: '#/components/examples/ERR_28809'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/json:
              schema:
                example:
                  errors:
                    - code: '401'
                      message: The request has not been applied because it lacks valid authentication credentials for the target resource.
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/json:
              schema:
                example:
                  errors:
                    - code: '403'
                      message: The server understood the request but refuses to authorize it.
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                ERR_415:
                  $ref: '#/components/examples/ERR_415'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                example:
                  errors:
                    - code: '500'
                      message: 'Oops, something went wrong! Please contact the server administrator.'
      x-validation-rules:
        - name: VR_OS01_001
          description: 'The request lacks valid authentication credentials: blank authorization, missing authorization, expired user''s tokenId. Refer to ERR_401.'
        - name: VR_OS01_002
          description: Login user has no permission. Refer to ERR_403.
        - name: VR_OS01_003
          description: Invalid Content-Type value. Refer to ERR_415.
        - name: VR_OS01_004
          description: The server encountered an unexpected condition. Refer to ERR_500.
        - name: VR_OS01_005
          description: A mandatory field is null. Refer to ERR_0801.
        - name: VR_OS01_006
          description: Field doesn't have the required length. Refer to ERR_0803.
        - name: VR_OS01_007
          description: Invalid date period values. Refer to ERR_0845.
        - name: VR_OS01_008
          description: Organization with same name already exists. Refer to ERR_28802.
        - name: VR_OS01_009
          description: Parent Organization does not exist. Refer to ERR_28809.
      x-permissions:
        - product.base-templace.organization.create
      x-is-external: 'true'
      x-roles:
        - IT_ADMIN
        - PATIENT
      x-grpc:
        serviceName: OrganizationService
        methodName: create
components:
  schemas:
    AddressDTO:
      type: object
      properties:
        use:
          type: string
          description: Purpose of this address.
          example: work
        type:
          type: string
          description: Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.
          example: physical
        text:
          type: string
          description: Text representation of the address.
          example: '1234 Blvd RG 5th floor Indianapolis, IN 12000'
        line:
          type: array
          description: 'Street name, number, direction & P.O. Box etc.'
          example: 1234 Blvd
          items:
            type: string
            description: 'Street name, number, direction & P.O. Box etc.'
            example: 1234 Blvd
        city:
          type: string
          description: 'Name of city, town etc.'
          example: Indianapolis
        district:
          type: string
          description: District name (or county).
          example: LaPorte
        state:
          type: string
          description: Sub-unit of country.
          example: Indiana
        postalCode:
          type: string
          description: Postal code for area.
          example: '12000'
        country:
          type: string
          description: Country code.
          example: US
        period:
          $ref: '#/components/schemas/PeriodDTO'
      description: The address for the organization.
    CodeableConceptDTO:
      type: object
      properties:
        coding:
          type: array
          description: Code defined by a terminology system.
          items:
            $ref: '#/components/schemas/CodingDTO'
        text:
          type: string
          description: Plain text representation of the concept.
          example: Code from external system
      description: The type of contact represented as a code.
    CodingDTO:
      type: object
      properties:
        system:
          type: string
          description: Identity of the terminology system.
          example: 'https://acme.lab/resultcodes'
        code:
          type: string
          description: Symbol in syntax defined by the system.
          example: COD1
        display:
          type: string
          description: Representation defined by the system.
          example: Code1
      description: The code assigned to the organization.
    ContactPointDTO:
      type: object
      properties:
        system:
          type: string
          description: Telecommunications form for contact point - what communications system is required to make use of the contact.
          example: phone
        value:
          type: string
          description: The actual contact point details.
          example: 5555-444-333
        use:
          type: string
          description: Purpose of this contact point.
          example: work
        rank:
          type: integer
          description: Specify preferred order of use (1 = highest).
          format: int32
          example: 1
        period:
          $ref: '#/components/schemas/PeriodDTO'
      description: Details of contact information for the organization.
    IdentifierDTO:
      type: object
      properties:
        use:
          type: string
          description: 'Identifies the purpose for this identifier, if known.'
          example: official
        type:
          $ref: '#/components/schemas/CodeableConceptDTO'
        system:
          type: string
          description: The namespace for the identifier value.
          example: 'urn:ietf:rfc:3986'
        value:
          type: string
          description: The value that is unique.
          example: 'urn:uuid:a76d9bbf-f293-4fb7-ad4c-2851cac77162'
        assignerOrganizationId:
          type: string
          description: ID of the organization that issued the ID.
          example: 05e78fe8-0742-11eb-adc1-0242ac120002
        period:
          $ref: '#/components/schemas/PeriodDTO'
      description: The ID of the organization to be used across multiple systems.
    OrganizationPartialDTO:
      type: object
      properties:
        id:
          type: string
          description: Organization ID
          example: 05e78fe8-0742-11eb-adc1-0242ac120002
        active:
          type: boolean
          description: Whether the organization's record is still in active use.
          example: true
        parentId:
          type: string
          description: A reference to the parent organization if applies.
          example: fb108dda-34fe-462d-9575-4bb2b468e8ce
        name:
          maxLength: 255
          minLength: 0
          type: string
          description: Name used for the organization.
          example: Health
        type:
          type: array
          description: Kind of organization.
          items:
            $ref: '#/components/schemas/CodeableConceptDTO'
        alias:
          type: array
          description: 'A list of alternate names that the organization is known as, or was known as in the past.'
          example: Health
          items:
            type: string
            description: 'A list of alternate names that the organization is known as, or was known as in the past.'
            example: Health
        description:
          type: string
          description: A description for the organization.
          example: This is a healthcare provider organization.
        telecom:
          type: array
          description: A contact detail for the organization.
          items:
            $ref: '#/components/schemas/ContactPointDTO'
        identifier:
          type: array
          description: Identifies this organization across multiple systems.
          items:
            $ref: '#/components/schemas/IdentifierDTO'
        contact:
          type: array
          description: Contact for the organization for a certain purpose.
          items:
            $ref: '#/components/schemas/UserContactDTO'
        address:
          type: array
          description: An address for the organization.
          items:
            $ref: '#/components/schemas/AddressDTO'
      description: Partial information about the organization.
    PeriodDTO:
      type: object
      properties:
        start:
          type: string
          description: Starting time with inclusive boundary.
          format: date-time
          example: '2020-02-07T18:28:17Z'
        end:
          type: string
          description: 'End time with inclusive boundary, if not ongoing.'
          format: date-time
          example: '2020-02-07T18:28:17Z'
      description: Time period when address was/is in use.
    UserContactDTO:
      type: object
      properties:
        purpose:
          $ref: '#/components/schemas/CodeableConceptDTO'
        userDid:
          type: string
          description: User identifier.
          example: 05e78fe8-0742-11eb-adc1-0242ac120002
      description: Contact information for the organization for a specific purpose.
    OrganizationDTO:
      required:
        - active
        - name
      type: object
      properties:
        id:
          type: string
          description: Organization ID.
          example: 05e78fe8-0742-11eb-adc1-0242ac120002
        active:
          type: boolean
          description: Whether the organization's record is still in active use.
          example: true
        parentId:
          type: string
          description: A reference to the parent organization if applies.
          example: fb108dda-34fe-462d-9575-4bb2b468e8ce
        name:
          maxLength: 255
          minLength: 0
          type: string
          description: Name used for the organization.
          example: Health
        type:
          type: array
          description: Kind of organization.
          items:
            $ref: '#/components/schemas/CodeableConceptDTO'
        alias:
          type: array
          description: 'A list of alternate names that the organization is known as, or was known as in the past.'
          example: Health
          items:
            type: string
            description: 'A list of alternate names that the organization is known as, or was known as in the past.'
            example: Health
        description:
          maxLength: 4096
          minLength: 0
          type: string
          description: A description for the organization.
          example: This is a healthcare provider organization.
        telecom:
          type: array
          description: A contact detail for the organization.
          items:
            $ref: '#/components/schemas/ContactPointDTO'
        identifier:
          type: array
          description: Identifies this organization across multiple systems.
          items:
            $ref: '#/components/schemas/IdentifierDTO'
        contact:
          type: array
          description: Contact for the organization for a certain purpose.
          items:
            $ref: '#/components/schemas/UserContactDTO'
        address:
          type: array
          description: An address for the organization.
          items:
            $ref: '#/components/schemas/AddressDTO'
      description: 'Organization information, such as parent organization, type of of organization, alternate names, organization description, and contact information. '
    ErrorDetail:
      type: object
      properties:
        code:
          type: string
        field:
          type: string
        message:
          type: string
      description: Detail information about the error.
    ErrorMessage:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorDetail'
      description: The error message (to be modified by developers for the application).
    NavigationInfoOrganizationDTO:
      type: object
      properties:
        first:
          type: string
          description: url to get first page
          example: api/v2/entity?page=1&size=20
        previous:
          type: string
          description: url to get previous page
          example: api/v2/entity?page=4&size=20
        next:
          type: string
          description: url to get next page
          example: api/v2/entity?page=6&size=20
        last:
          type: string
          description: url to get last page
          example: api/v2/entity?page=11&size=20
      description: Links to navigation pages for the organization.
    PagingInfoOrganizationDTO:
      type: object
      properties:
        totalCount:
          type: integer
          description: Total results count
          format: int64
          example: 215
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationDTO'
        paging:
          $ref: '#/components/schemas/NavigationInfoOrganizationDTO'
      description: Pages to display for the organization information (to be modified by developers for the application)
    ResponseMessage:
      type: object
      properties:
        success:
          type: boolean
      description: The response message (to be modified by developers for the application).
  examples:
    ERR_415:
      summary: ERR_415
      description: Content-type header is missing or is different to application/json
      value: |-
        {
          "errors": [
            {
              "code": "ERR_415",
              "message": "Unsupported media type."
            }
          ]
        }
    ERR_400:
      summary: ERR_400
      description: The server cannot or will not process the request due to something that is perceived to be a client error
      value: |-
        {
          "errors": [
            {
              "code": "ERR_400",
              "message": "Could not resolve property: page."
            }
          ]
        }
    ERR_404:
      summary: ERR_404
      description: The server cannot found any result
      value: |-
        {
          "errors": [
            {
              "code": "ERR_404",
              "message": "Organization with ID {0} was not found."
            }
          ]
        }
    ERR_0801:
      summary: ERR_0801
      description: Field is required
      value: |-
        {
          "errors": [
            {
              "code": "ERR_0801",
              "field": "{0}",
              "message": "{0} is required."
            }
          ]
        }
    ERR_0803:
      summary: ERR_0803
      description: The server will not process the request due to a invalid zip format
      value: |-
        {
          "errors": [
            {
              "code": "ERR_0803",
              "field": "{0}",
              "message": "{0} cannot be longer than 255 characters."
            }
          ]
        }
    ERR_0823:
      summary: ERR_0823
      description: Entity detail was not found.
      value: |-
        {
          "errors": [
            {
              "code": "ERR_0823",
              "field": "{0}",
              "message": "{0} with {1} {2} not found."
            }
          ]
        }
    ERR_0841:
      summary: ERR_0841
      description: The provided sorting property is not supported.
      value: |-
        {
          "errors": [
            {
              "code": "ERR_0841",
              "message": "Sorting by {0} is not supported."
            }
          ]
        }
    ERR_0845:
      summary: ERR_0845
      description: The server will not process the request due to a field restriction
      value: |-
        {
          "errors": [
            {
              "code": "ERR_0845",
              "message": "Invalid {0} period. Start date must be before end date."
            }
          ]
        }
    ERR_28802:
      summary: ERR_28802
      description: There is an existing organization for the given name.
      value: |-
        {
          "errors": [
            {
              "code": "ERR_28802",
              "field": "name",
              "message": "There is an existing organization for the given name."
            }
          ]
        }
    ERR_28809:
      summary: ERR_28809
      description: Parent organization does not exist.
      value: |-
        {
          "errors": [
            {
              "code": "ERR_28809",
              "field": "parentId",
              "message": "The parent organization with id {0} does not exist."
            }
          ]
        }
